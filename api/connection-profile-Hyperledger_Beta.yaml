---
#
# Copyright Lambda256 Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#
name: "Basic-Plan-Network-Config"

#
# Any properties with an "x-" prefix will be treated as application-specific, exactly like how naming
# in HTTP headers or swagger properties work. The SDK will simply ignore these fields and leave
# them for the applications to process. This is a mechanism for different components of an application
# to exchange information that are not part of the standard schema described below. In particular,
# the "x-type" property with the "hlfv1" value example below is used by Hyperledger Composer to
# determine the type of Fabric networks (v0.6 vs. v1.0) it needs to work with.
#
x-type: "hlfv1"

#
# Describe what the target network is/does.
#
description: "Basic Plan Network"

#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: "1.0"

#
# The client section is SDK-specific. The sample below is for the node.js SDK
#
client:
  # Which organization does this application instance belong to? The value must be the name of an org
  # defined under "organizations"
  organization: Org1

  # Some SDKs support pluggable KV stores, the properties under "credentialStore"
  # are implementation specific
  credentialStore:
    # [Optional]. Specific to FileKeyValueStore.js or similar implementations in other SDKs. Can be others
    # if using an alternative impl. For instance, CouchDBKeyValueStore.js would require an object
    # here for properties like url, db name, etc.
    path: "/tmp/hfc-kvs"

    # [Optional]. Specific to the CryptoSuite implementation. Software-based implementations like
    # CryptoSuite_ECDSA_AES.js in node SDK requires a key store. PKCS#11 based implementations does
    # not.
    cryptoStore:
      # Specific to the underlying KeyValueStore that backs the crypto key store.
      path: "/tmp/hfc-cvs"

    # [Optional]. Specific to Composer environment
    wallet: wallet-name

#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:
  # name of the channel
  mychannel:
    # Required. list of orderers designated by the application to use for transactions on this
    # channel. This list can be a result of access control ("org1" can only access "ordererA"), or
    # operational decisions to share loads from applications among the orderers.  The values must
    # be "names" of orgs defined under "organizations/peers"
    orderers:
      - orderer.example.com

    # Required. list of peers from participating orgs
    peers:
      peer0.org1.example.com:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
        endorsingPeer: true

        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
        # installed. The app can also use this property to decide which peers to send the
        # chaincode install request. Default: true
        chaincodeQuery: true

        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
        # queryBlock(), queryTransaction(), etc. Default: true
        ledgerQuery: true

        # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
        # produce events but the app typically only needs to connect to one to listen to events.
        # Default: true
        eventSource: true

      peer1.org1.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

    # [Optional]. what chaincodes are expected to exist on this channel? The application can use
    # this information to validate that the target peers are in the expected state by comparing
    # this list with the query results of getInstalledChaincodes() and getInstantiatedChaincodes()
    #chaincodes:
      # the format follows the "cannonical name" of chaincodes by fabric code
      #- mycc:1.0

#
# list of participating organizations in this network
#
organizations:
  Org1:
    mspid: Org1MSP

    peers:
      - peer0.org1.example.com
      - peer1.org1.example.com

    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.
    certificateAuthorities:
      - ca-org1

    # [Optional]. If the application is going to make requests that are reserved to organization
    # administrators, including creating/updating channels, installing/instantiating chaincodes, it
    # must have access to the admin identity represented by the private key and signing certificate.
    # Both properties can be the PEM string or local path to the PEM file. Note that this is mainly for
    # convenience in development mode, production systems should not expose sensitive information
    # this way. The SDK should allow applications to set the org admin identity via APIs, and only use
    # this route as an alternative when it exists.
    adminPrivateKey:
      #path: ./fabric-samples/first-network/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/keystore/
      pem:  |
        -----BEGIN PRIVATE KEY-----
        MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQghStUKydm3gwPNjMt
        lsA2KDFRziW4sC/ig8IHKtWoO0GhRANCAAQJjan9WjV89O5yKuVPgPBF3URr81DE
        Zc0oUKV0PB0ESqjLE4+t/frpU2kZR+KHLXqcCsHoypXjEJH57vsNJrBt
        -----END PRIVATE KEY-----
        

    signedCert:
      #path: ./fabric-samples/first-network/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/signcerts/Admin@org1.example.com-cert.pem
      pem:  |
        -----BEGIN CERTIFICATE-----
        MIICKjCCAdCgAwIBAgIQYK6EyYfuUuiGDWkptl5PrjAKBggqhkjOPQQDAjBzMQsw
        CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy
        YW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu
        b3JnMS5leGFtcGxlLmNvbTAeFw0yMDAxMDIwNzAxMDBaFw0yOTEyMzAwNzAxMDBa
        MGwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T
        YW4gRnJhbmNpc2NvMQ8wDQYDVQQLEwZjbGllbnQxHzAdBgNVBAMMFkFkbWluQG9y
        ZzEuZXhhbXBsZS5jb20wWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQJjan9WjV8
        9O5yKuVPgPBF3URr81DEZc0oUKV0PB0ESqjLE4+t/frpU2kZR+KHLXqcCsHoypXj
        EJH57vsNJrBto00wSzAOBgNVHQ8BAf8EBAMCB4AwDAYDVR0TAQH/BAIwADArBgNV
        HSMEJDAigCCOj9X9Zz/gsQj2QzIv2tUUuqI9tfF0OH5KLR6pS4h/ATAKBggqhkjO
        PQQDAgNIADBFAiEA/88B4DCU9fLiQb2QfiUF2egVvlg47s41L9BrzO52Eo0CIB/J
        E06YrIwilXDwuiDqmaq2P3aY4/+iN8xY74+2o+Z+
        -----END CERTIFICATE-----
        

  # the profile will contain public information about organizations other than the one it belongs to.
  # These are necessary information to make transaction lifecycles work, including MSP IDs and
  # peers with a public URL to send transaction proposals. The file will not contain private
  # information reserved for members of the organization, such as admin key and certificate,
  # fabric-ca registrar enroll ID and secret, etc.

#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  orderer.example.com:
    url: grpcs://hyper-4053561120315537863.luniverse.dev:7050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
#      ssl-target-name-override: orderer.example.com
      sslProvider: openSSL
      negotiationType: TLS
      hostnameOverride: orderer.example.com
      grpc-max-send-message-length: 15
      grpc.keepalive_time_ms: 360000
      grpc.keepalive_timeout_ms: 180000

    #tlsCACerts:
      #path: ./fabric-samples/first-network/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

    tlsCACerts:
      pem:  |
        -----BEGIN CERTIFICATE-----
        MIICQjCCAemgAwIBAgIQF//SkhYud8DhOFMtuW+Z/TAKBggqhkjOPQQDAjBsMQsw
        CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy
        YW5jaXNjbzEUMBIGA1UEChMLZXhhbXBsZS5jb20xGjAYBgNVBAMTEXRsc2NhLmV4
        YW1wbGUuY29tMB4XDTIwMDEwMjA3MDEwMFoXDTI5MTIzMDA3MDEwMFowbDELMAkG
        A1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBGcmFu
        Y2lzY28xFDASBgNVBAoTC2V4YW1wbGUuY29tMRowGAYDVQQDExF0bHNjYS5leGFt
        cGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABNv8h7NuMmBvJLZPe+rS
        bs3hYSE200GnSJHKBsNX0bPQ0ta752fVmX4bxFDxWpx4fXOdneZVvW2zfsn5M1te
        Yh2jbTBrMA4GA1UdDwEB/wQEAwIBpjAdBgNVHSUEFjAUBggrBgEFBQcDAgYIKwYB
        BQUHAwEwDwYDVR0TAQH/BAUwAwEB/zApBgNVHQ4EIgQgmU44GMsaTb+jKRYQ7vCQ
        M/XyhTeC5JQUMZw1wIR9g2EwCgYIKoZIzj0EAwIDRwAwRAIgJuoMVyQE+xWdyJOF
        wIyB0onR+/9KHj9L/BzJ5rNtFKICIBiU+L4OhyXXCglvbbigOfEIitZcpryv0EB/
        EURo/5rn
        -----END CERTIFICATE-----
        

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  peer0.org1.example.com:
    # this URL is used to send endorsement and query requests
    url: grpcs://hyper-4053561120315537863.luniverse.dev:7051

    grpcOptions:
      grpc.http2.keepalive_time: 15
      ssl-target-name-override: peer0.org1.example.com
      negotiationType: TLS
      sslProvider: openSSL
      hostnameOverride: peer0.org1.example.com

    #tlsCACerts:
      #path: ./fabric-samples/first-network/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt

    tlsCACerts:
      pem:  |
        -----BEGIN CERTIFICATE-----
        MIICZzCCAg2gAwIBAgIQAkpOC/QyTqOXQ6V+cgMgMDAKBggqhkjOPQQDAjB2MQsw
        CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy
        YW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEfMB0GA1UEAxMWdGxz
        Y2Eub3JnMS5leGFtcGxlLmNvbTAeFw0yMDAxMDIwNzAxMDBaFw0yOTEyMzAwNzAx
        MDBaMFsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQH
        Ew1TYW4gRnJhbmNpc2NvMR8wHQYDVQQDExZwZWVyMC5vcmcxLmV4YW1wbGUuY29t
        MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWPe2aOIWMgl9TW3Aomhm+WUmfOs3
        GZG/JyZrKG7A8atMJvIRZfdsbTYamqlt1kIfOAFY5X0L9JBMHEfBLdn8J6OBlzCB
        lDAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMC
        MAwGA1UdEwEB/wQCMAAwKwYDVR0jBCQwIoAgewG9hANSh7w+i05LIZDtxjNpfCXF
        4nm+7kkjJ5ikHCkwKAYDVR0RBCEwH4IWcGVlcjAub3JnMS5leGFtcGxlLmNvbYIF
        cGVlcjAwCgYIKoZIzj0EAwIDSAAwRQIhAJW5rZAtCwfCxHRrwACYzxTFxowXrISa
        AoG49WnxtXK2AiA8uWaFWZKnuJO28bFYOMlGxJzAIPzz4lxRLKBa55E2MA==
        -----END CERTIFICATE-----
        

  peer1.org1.example.com:
    url: grpcs://hyper-4053561120315537863.luniverse.dev:8051

    grpcOptions:
      grpc.http2.keepalive_time: 15
      ssl-target-name-override: peer1.org1.example.com
      negotiationType: TLS
      sslProvider: openSSL
      hostnameOverride: peer1.org1.example.com

    #tlsCACerts:
      #path: ./fabric-samples/first-network/crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/server.crt

    tlsCACerts:
      pem:  |
        -----BEGIN CERTIFICATE-----
        MIICZzCCAg6gAwIBAgIRAOcT9jzOfrPaYNvr3RCzqy8wCgYIKoZIzj0EAwIwdjEL
        MAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG
        cmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHzAdBgNVBAMTFnRs
        c2NhLm9yZzEuZXhhbXBsZS5jb20wHhcNMjAwMTAyMDcwMTAwWhcNMjkxMjMwMDcw
        MTAwWjBbMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UE
        BxMNU2FuIEZyYW5jaXNjbzEfMB0GA1UEAxMWcGVlcjEub3JnMS5leGFtcGxlLmNv
        bTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABLy1TZ1JPuAhxHt1lFZAJjrdbTOn
        ph0fCo2FnfeccpXqeDihPAZx4PWo35xczdnJYI5MB1gDlISGTBf55WxWsHGjgZcw
        gZQwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcD
        AjAMBgNVHRMBAf8EAjAAMCsGA1UdIwQkMCKAIHsBvYQDUoe8PotOSyGQ7cYzaXwl
        xeJ5vu5JIyeYpBwpMCgGA1UdEQQhMB+CFnBlZXIxLm9yZzEuZXhhbXBsZS5jb22C
        BXBlZXIxMAoGCCqGSM49BAMCA0cAMEQCIBFBi1qcfP+UeQ/lT4XjYXu1wBDvxu4F
        Czlr5aXLFFXmAiA70Z0duJvACkFOVvqiG+X0VaMOjBtRYn6pBNT9Uwu4ow==
        -----END CERTIFICATE-----
        

#
# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows
# certificate management to be done via REST APIs. Application may choose to use a standard
# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.
#
certificateAuthorities:
  ca-org1:
    url: http://hyper-4053561120315537863.luniverse.dev:7054
    # the properties specified under this object are passed to the 'http' client verbatim when
    # making the request to the Fabric-CA server
    httpOptions:
      verify: true

    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
    # needed to enroll and invoke new users.
    registrar: #single entitiy
      - enrollId: admin
        enrollSecret: adminpw
    # [Optional] The optional name of the CA.
    caName: ca-org1

